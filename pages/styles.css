html * {
	font-family: 'Roboto', sans-serif;
  transition: 0.3s;
  box-sizing: border-box;
}

html *:focus:not(input):not(a) {
  box-shadow: 0px 2px 3px rgb(80, 80, 80)
}

input:focus, a:focus {
  border-bottom: 1px solid #ffbaa8;
}

input {
  border: none;
  border-bottom: 1px solid rgb(212, 212, 212);
  outline: none;
}

button {
  background: rgb(240, 240, 240);
  border: 1px solid black;
  outline: none;
  padding: 10px;
  margin: 5px;
  border-radius: 3px;
  width: 60px;
}

button:hover {
  background-color: #feceab;
  cursor: pointer;
}

button:focus {
  background-color: #feceab
}

h1 {
  font-size: 50px;
}

h2 {
  font-size: 20px;
}

h3 {
  font-size: 18px;
}

.flex-row-centered {
  display: flex;
  flex-direction: row;
  justify-content: center;
}

.flex-column-centered {
  display: flex;
  flex-direction: column;
  align-items: center;
}

a {
  color: inherit;
  text-decoration: none;
  outline: none;
}

.container {
  min-height: 100vh;
}

header, footer {
  width: 100vw;
  height: 50px;
  box-shadow: 0px 2px 3px black;
  font-size: 10px;
  align-items: center;
  background-color: #363636;
  color: white;
}

header {
  padding: 20px;
  height: 75px;
  display: flex;
  align-items: center;
  justify-content: space-between;
}

main {
  flex: 1;
  display: flex;
  flex-direction: row;
  justify-content: center;
}

article {
  margin: 5vh;
  width: 50%;
  text-align: center;
}

#task-form {
  box-shadow: 0px 2px 5px rgb(185, 185, 185);
  width: 28vw;
  min-width: 400px;
  border-radius: 3px;
  padding: 10px;
  margin: 20px;
}

#task-list {
  padding: 10px;
}

.task {
  width: 28vw;
  min-width: 400px;
  list-style: none;
  box-shadow: 0px 2px 5px rgb(185, 185, 185);
  border-radius: 3px;
  background-color: white;
  cursor: move;
  margin: 10px;
  padding: 10px 20px 10px 20px;
  align-items: center;
  justify-content: space-between;
}

.task input, #task-form input, #clock input {
  cursor: text;
  padding: 5px;
  width: 100%;
}

.task input {
  width: 20vw;
  min-width: 285px;
}

.task span {
  cursor: pointer;
}

#clock {
  display: flex;
  justify-content: center;
  align-items: center;
}

#clock * {
  margin: 5px;
  text-align: center;
  max-width: 100px;
}

#clock input {
  width: 50px;
}

.pause {
  background-color: #ffbcbc;
}

.start {
  background-color: #b7efcd;
}

.reset {
  background-color: rgb(170, 170, 170);
}

@media all and (max-width: 800px) {
  header, main {
    display: flex;
    flex-direction: column;
  }
  header {
    height: 160px;
  }
  article {
    margin: 5vh 0 5vh 0;
    width: 100%;
  }
  #pomo {
    display: flex;
    flex-direction: column;
    align-items: center;
  }
}


.clock {
  position: relative;
  height: 300px;
  width: 300px;
}

.clock-circle {
  fill: none;
  stroke: none;
}

.clock-path {
  stroke-width: 5px;
  stroke: #99d8d0;
}

.clock-label {
  position: absolute;
  width: 300px;
  height: 300px;
  top: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 48px;
}

.clock-path-remaining {
  stroke-width: 7px;
  stroke-linecap: round;
  transform: rotate(90deg);
  transform-origin: center;
  transition: 1s linear all;
  stroke: currentColor;
}

.clock-svg {
  transform: scaleX(-1);
}


/*
My component for implementation of progress bar. I use CSS Custom Properties for settings of parameters such as size, color, unit e.t.c. The diagram is implemented via SVG.

*/

/*
=====
c-progress
=====
*/

.c-progress{
  --uicProgressSize: var(--cProgressSize);
  --uicProgressCircumference: var(--cProgressCircumference, 2.51327em);
  --uicProgressGraphValue: var(--cProgressGraphValue, 2.51327em);
	
	font-size: var(--uicProgressSize);
	width: 1em;
	height: 1em;  
  
  position: relative; 
  transform: rotate(-90deg);
}

.c-progress__circle{
  width: 100%;
  height: 100%;
  
  position: absolute;
  top: 0;
  left: 0;
}

.c-progress__progress-bg{
  opacity: .4;
}

.c-progress__progress-value{
  stroke-dasharray: var(--uicProgressCircumference);
  stroke-dashoffset: var(--uicProgressGraphValue);
	transition: stroke-dashoffset 1.5s cubic-bezier(0.42, 0, 0, 1.1), stroke .5s ease-out;
}

/*
=====
c-progressbar
=====
*/

.c-progressbar{
	--cProgressSize: var(--cProgressBarSize);
  --cProgressColor: var(--cProgressBarColor);
  --cProgressStrokeWidth: var(--cProgressBarStrokeWidth);	
	--uicProgressBarSize: var(--cProgressBarSize);
	--uicProgressBarUnit: var(--cProgressBarUnit, "%");
	--uicProgressBarValueFontFamily: var(--cProgressBarValueFontFamily);
	--uicProgressBarValueFontSize: var(--cProgressBarValueFontSize);
	--uicProgressBarValueFontWeight: var(--cProgressBarValueFontWeight);
	--uicProgressBarValueTextColor: var(--cProgressBarValueTextColor);
  
	position: relative;
	width: var(--uicProgressBarSize);
	height: var(--uicProgressBarSize);
}

.c-progressbar__value{
  box-sizing: border-box;
  width: 100%;
  height: 100%;
  
  display: flex;
  align-items: center;
  justify-content: center;
  
  position: absolute;
  top: 0;
  left: 0;
}

.c-progressbar__value::after{
	content: var(--uicProgressBarUnit);
}

.c-progressbar__value{
	font-family: var(--uicProgressBarValueFontFamily);
  font-weight: var(--uicProgressBarValueFontWeight);
  font-size: var(--uicProgressBarValueFontSize);
	color: var(--uicProgressBarValueTextColor);
}

/*
=====
SETTINGS
=====
*/

.c-progressbar{
	--cProgressBarUnit: "%";
	--cProgressBarSize: 70vmin;
  --cProgressBarColor: #a29bfe;
	--cProgressBarValueFontFamily: inherit;
	--cProgressBarValueFontSize: 8vmin;
	--cProgressBarValueFontWeight: 700;
  --cProgressBarStrokeWidth: 2vmin;
	--cProgressBarValueTextColor: #a29bfe;	
}
